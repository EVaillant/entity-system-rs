var searchIndex = JSON.parse('{\
"entity_system":{"doc":"Entity System Composant in Rust","i":[[3,"Entity","entity_system","Entity type, as seen by the user.",null,null],[12,"id","","id of Entity",0,null],[3,"EntityAllocator","","Entity Factory.",null,null],[3,"EntityAllocatorIterator","","EntityAllocatorIterator over EntityAllocator. cf…",null,null],[3,"EntityManager","","Manage (create, delete, update, iter...) Entities.",null,null],[3,"EntityIterator","","EntityIterator over EntityManager. cf [`EntityManager`] to…",null,null],[3,"Query","","Query to select some Entity from EntityManager.",null,null],[3,"Connection","","",null,null],[3,"Adapter","","",null,null],[3,"EventDispatcher","","",null,null],[3,"BasicVecStorage","","Implementation of Storage with a [`Vec`] as underlying.",null,null],[11,"new","","Create a new `Entity`",0,[[]]],[11,"new","","Create a new `EntityAllocator`",1,[[]]],[11,"alloc","","Alloc a new `Entity`",1,[[],["entity",3]]],[11,"free","","Free an `Entity`. `Entity` id could be re-used",1,[[["entity",3]]]],[11,"iter","","Iter over allocated `Entity`",1,[[],["entityallocatoriterator",3]]],[11,"new","","Create an Iterator",2,[[["entityallocator",3]]]],[11,"new","","Create new instance.",3,[[]]],[11,"create_entity","","Create new entity.",3,[[],["entity",3]]],[11,"delete_entity","","Delete an entity.",3,[[["entity",3]]]],[11,"add_component","","Add component to an entity. The component is initialized…",3,[[["entity",3]]]],[11,"add_component_with","","Add component to an entity and initialize with closure f.",3,[[["entity",3]]]],[11,"remove_component","","Remove component to an entity.",3,[[["entity",3]]]],[11,"has_component","","Check if an entity has a component.",3,[[["entity",3]]]],[11,"get_component","","Get a ref of component from an entity.",3,[[["entity",3]],["ref",3]]],[11,"get_component_mut","","Get a mut ref of component from an entity.",3,[[["entity",3]],["refmut",3]]],[11,"update_component_with","","Update a component from an entity via closure f.",3,[[["entity",3]]]],[11,"iter","","Iterate on Entity that match the query.",3,[[["query",3]],["entityiterator",3]]],[11,"iter_all","","Iterate over all Entities.",3,[[],["entityallocatoriterator",3]]],[11,"new","","Create an Iterator",4,[[["query",3],["entitymanager",3]]]],[11,"new","","Create a new query",5,[[]]],[11,"check","","Check if query match the entity.",5,[[["entitymanager",3],["entity",3]]]],[11,"check_component","","Check entity has the component.",5,[[]]],[11,"check_not_component","","Check entity has not the component.",5,[[]]],[11,"check_component_by","","Check entity has the component and the composant match the…",5,[[]]],[11,"check_global","","Check if entity match the closure f.",5,[[]]],[11,"new","","",6,[[["rc",3],["rc",3]]]],[11,"empty","","",6,[[]]],[11,"connect","","",6,[[]]],[11,"disconnect","","",6,[[]]],[11,"new","","",7,[[]]],[11,"connect","","",7,[[["rc",3],["refcell",3]]]],[11,"disconnect","","",7,[[["rc",3],["refcell",3]]]],[11,"invoke","","",7,[[]]],[11,"new","","",8,[[],["rc",3]]],[11,"create_connection","","",8,[[["rc",3],["rc",3]],["connection",3]]],[11,"push","","",8,[[["rc",3]]]],[11,"dispatch","","",8,[[["rc",3]]]],[8,"Component","","Abstract component type.",null,null],[16,"Storage","","",9,null],[8,"StorageAccess","","Abstract access to storge by component type.",null,null],[10,"get","","Return ref on Storage",10,[[],["ref",3]]],[10,"get_mut","","Return ref mut on Storage",10,[[],["refmut",3]]],[8,"EntityManagerComponent","","Abstract entity manager component type.",null,null],[10,"free","","Free all components for entity.",11,[[["entity",3]]]],[8,"EventHandler","","",null,null],[10,"on_event","","",12,[[]]],[8,"Dispatcher","","",null,null],[10,"connect","","",13,[[["refcell",3],["rc",3],["rc",3]]]],[10,"disconnect","","",13,[[["refcell",3],["rc",3],["rc",3]]]],[8,"AccessEventAdapter","","",null,null],[10,"get","","",14,[[],["refcell",3]]],[8,"Storage","","Trait must be implemented to store [`crate::Component`]",null,null],[10,"alloc","","Allocation an item in the storage",15,[[["entity",3]]]],[10,"free","","Free the item in the storage",15,[[["entity",3]]]],[10,"get","","Get item from storage",15,[[["entity",3]]]],[10,"get_mut","","Get item from storage (mutable version)",15,[[["entity",3]]]],[10,"has","","Check if allocatio has been done    ",15,[[["entity",3]]]],[14,"create_entity_manager_component","","Create EntityManagerComponent",null,null],[14,"create_event_adapters","","",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"into_iter","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",16,[[]]],[11,"into","","",16,[[]]],[11,"borrow","","",16,[[]]],[11,"borrow_mut","","",16,[[]]],[11,"try_from","","",16,[[],["result",4]]],[11,"try_into","","",16,[[],["result",4]]],[11,"type_id","","",16,[[],["typeid",3]]],[11,"connect","","",8,[[["refcell",3],["rc",3],["rc",3]]]],[11,"disconnect","","",8,[[["refcell",3],["rc",3],["rc",3]]]],[11,"alloc","","",16,[[["entity",3]]]],[11,"free","","",16,[[["entity",3]]]],[11,"get","","",16,[[["entity",3]]]],[11,"get_mut","","",16,[[["entity",3]]]],[11,"has","","",16,[[["entity",3]]]],[11,"next","","",2,[[],[["option",4],["entity",3]]]],[11,"next","","",4,[[],[["option",4],["entity",3]]]],[11,"clone","","",0,[[],["entity",3]]],[11,"default","","",1,[[]]],[11,"default","","",3,[[],["entitymanager",3]]],[11,"default","","",5,[[],["query",3]]],[11,"default","","",6,[[]]],[11,"default","","",7,[[],["adapter",3]]],[11,"default","","",16,[[],["basicvecstorage",3]]],[11,"eq","","",0,[[["entity",3]]]],[11,"ne","","",0,[[["entity",3]]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"hash","","",0,[[]]]],"p":[[3,"Entity"],[3,"EntityAllocator"],[3,"EntityAllocatorIterator"],[3,"EntityManager"],[3,"EntityIterator"],[3,"Query"],[3,"Connection"],[3,"Adapter"],[3,"EventDispatcher"],[8,"Component"],[8,"StorageAccess"],[8,"EntityManagerComponent"],[8,"EventHandler"],[8,"Dispatcher"],[8,"AccessEventAdapter"],[8,"Storage"],[3,"BasicVecStorage"]]},\
"paste":{"doc":"github crates-io docs-rs","i":[[14,"paste","paste","",null,null]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);